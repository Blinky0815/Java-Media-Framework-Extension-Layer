/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class utilities_signal_processing_SignalProcessor */

#ifndef _Included_utilities_signal_processing_SignalProcessor
#define _Included_utilities_signal_processing_SignalProcessor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    fft
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_fft
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    ifft
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_ifft
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    newR2RPlan
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_newR2RPlan
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    freeR2RPlan
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_freeR2RPlan
  (JNIEnv *, jobject);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    newFilter
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_newFilter__I
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    newFilter
 * Signature: (IDIDDI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_newFilter__IDIDDI
  (JNIEnv *, jobject, jint, jdouble, jint, jdouble, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    freeC2CPlan
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_freeC2CPlan
  (JNIEnv *, jobject);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    newC2CPlan
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_newC2CPlan
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    filterFilter
 * Signature: ([D[DI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_filterFilter
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    powerSpectrum
 * Signature: ([D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_powerSpectrum
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    crossSpectrum
 * Signature: ([D[D[D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_crossSpectrum
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    hilbert
 * Signature: ([D[D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_hilbert
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    spectra
 * Signature: ([D[D[D[D[D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_spectra
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    coherence
 * Signature: ([D[D[D)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_coherence
  (JNIEnv *, jobject, jdoubleArray, jdoubleArray, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    setFilterType
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_setFilterType
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    setSampleRate
 * Signature: (DI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_setSampleRate
  (JNIEnv *, jobject, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getSampleRate
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getSampleRate
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    setOrder
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_setOrder
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getOrder
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_utilities_signal_1processing_SignalProcessor_getOrder
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    setLow
 * Signature: (DI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_setLow
  (JNIEnv *, jobject, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getLow
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getLow
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    setHigh
 * Signature: (DI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_setHigh
  (JNIEnv *, jobject, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getHigh
 * Signature: (I)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getHigh
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getNumNotches
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_utilities_signal_1processing_SignalProcessor_getNumNotches
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getNotchFrequency
 * Signature: (II)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getNotchFrequency
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getNotchWidth
 * Signature: (II)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getNotchWidth
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    addNotch
 * Signature: (DDI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_addNotch
  (JNIEnv *, jobject, jdouble, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    editNotch
 * Signature: (IDDI)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_editNotch
  (JNIEnv *, jobject, jint, jdouble, jdouble, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    removeNotch
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_removeNotch
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    clearNotches
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_clearNotches
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    sortNotches
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_utilities_signal_1processing_SignalProcessor_sortNotches
  (JNIEnv *, jobject, jint);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getVariance
 * Signature: ([D)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getVariance
  (JNIEnv *, jobject, jdoubleArray);

/*
 * Class:     utilities_signal_processing_SignalProcessor
 * Method:    getMean
 * Signature: ([D)D
 */
JNIEXPORT jdouble JNICALL Java_utilities_signal_1processing_SignalProcessor_getMean
  (JNIEnv *, jobject, jdoubleArray);

#ifdef __cplusplus
}
#endif
#endif
