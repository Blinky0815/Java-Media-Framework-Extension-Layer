<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
  "http://www.w3.org/TR/REC-html40/transitional.dtd">
<HTML>
<HEAD>
  <TITLE>VecMat - The Vector Template Class</TITLE>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html;charset=iso-8859-1">
  <META HTTP-EQUIV="Content-Style-Type" CONTENT="text/css">
  <META NAME="Author" CONTENT="Kevin Dolan">
  <LINK HREF="vecmat.css" REL="stylesheet" TYPE="text/css">
</HEAD>

<BODY>

<H1>The Vector Template Class.</H1>

<H2>3. Vector&lt;T&gt;</H2>

<P>This is a templatized class for viewing data as a vector. A vector, in
general, does not have its own data. Instead, it views a block of data in a
certain way. It is therefore possible to have multiple vectors that view the
same data, or even to have a mixture of vectors and matrices that all view the
same data. Class <CODE>T</CODE> must have a public default constructor, copy
constructor, destructor, and assignment operator. Many of the operators and
member functions will only work properly for types that behave like standard
numeric types. When a vector is destroyed it will deallocate the data it views
only if it is the only remaining owner of that data.</P>

<P>This class makes use of the <A HREF="traits.htm"><CODE>Traits</CODE></A>
support template class for determining properties of the value type being used,
such as whether the type has a non-trivial constructor, whether or not the type
is a pointer, and the real type associated with complex types.</P>

<H3>3.1. Embedded Types.</H3>

<P>The Vector class provides two embedded iterator classes, and several embedded
typedefs. These are provided both for simplifying the code within the class
definition, and also for use in templatized functions which may need extra type
information.</P>

<DIV CLASS=clb>
<P>Vector&lt;T&gt;::iterator</P>
<P>Vector&lt;T&gt;::const_iterator</P>
</DIV>
<P>These embedded classes provide random access iterators for use in generic
algorithms.</P>

<DIV CLASS=clb>
<P>typedef VM::Allocator&lt;T&gt; allocator_type;</P>
<P>typedef typename allocator_type::value_type value_type;</P>
<P>typedef typename allocator_type::pointer pointer;</P>
<P>typedef typename allocator_type::const_pointer const_pointer;</P>
<P>typedef typename allocator_type::size_type size_type;</P>
<P>typedef typename allocator_type::difference_type difference_type;</P>
<P>typedef typename allocator_type::reference reference;</P>
<P>typedef typename allocator_type::const_reference const_reference;</P>
<P>typedef typename Traits&lt;T&gt;::real_type real_type;</P>
<P>typedef iterator reverse_iterator;</P>
<P>typedef const_iterator const_reverse_iterator;</P>
</DIV>
<P>Note that <CODE>VM::Allocator</CODE> is simply whichever allocator class you
have instructed the <EM>VecMat</EM> software to use. By default it is
<CODE>std::allocator</CODE>.</P>

<H3>3.2. Constructors.</H3>

<H4><CODE>Vector&lt;T&gt;()</CODE></H4>
<P>This creates an empty vector.</P>

<H4><CODE>Vector&lt;T&gt;(size_t n)</CODE></H4>
<P>This constructor creates a vector of <CODE>n</CODE> elements. If
<CODE>T</CODE> is a standard numeric type, pointer, or any POD type, including
<CODE>std::complex&lt;T&gt;</CODE>, then the vector will be initialized to
zero. If not, then the elements are initialized with a default constructed
object. This constructor uses the <CODE>VMTraits&lt;T&gt;::zero()</CODE>
function to obtain the value to initialize to. Use of this constructor is
therefore equivalent to <CODE>Vector&lt;T&gt; x(VMTraits&lt;T&gt;::zero(),
n)</CODE>.</P>

<H4><CODE>Vector&lt;T&gt;(const T&amp; a, size_t n)</CODE></H4>
<P>This creates a vector of size <CODE>n</CODE>, with each element initialized
to the value <CODE>a</CODE>. This initialization is done through the copy
constructor of class <CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;T&gt;(NoInit, size_t n)</CODE></H4>
<P>If class <CODE>T</CODE> has a specialized version of the
<CODE>VMTraits&lt;T&gt;</CODE> structure, with the flag <CODE>is_simple</CODE>
set to <CODE>true</CODE>, then the elements will not be initialized at all.
This flag is set for all the standard numeric types, including
<CODE>std::complex&lt;float&gt;</CODE> and <CODE>std::complex&lt;double&gt;</CODE>,
and all pointer types. For non-simple types, this constructor is equivelent to
the <CODE>Vector&lt;T&gt;(size_t n)</CODE> constructor.</P>

<H4><CODE>Vector&lt;T&gt;(T* a, size_t n, ptrdiff_t s = 1)</CODE></H4>
<P>This creates a vector of size <CODE>n</CODE> from a C-style array given by
the pointer <CODE>a</CODE>. The data is not copied. Instead the vector is now a
non-owner view of the data. It is up to the user to make sure the array
actually has <CODE>n</CODE> elements. The optional parameter <CODE>s</CODE>
allows for viewing the array with a stride other than one.</P>

<H4><CODE>template &lt;class RanIt&gt; Vector&lt;T&gt;(RanIt a,
RanIt b)</CODE></H4>
<P>This creates a vector by copying the values from the iterator range
<CODE>a</CODE> to <CODE>b</CODE>. Values are copied using the copy constructor
of type <CODE>T</CODE>. Note that <CODE>b</CODE> is not dereferenced, as it is
assumed to be the iterator just after the last element to be copied. This
constructor can be used to copy the contents of another container class, where
<CODE>a</CODE> and <CODE>b</CODE> would be given by the container's
<CODE>begin()</CODE> and <CODE>end()</CODE> member functions.</P> 

<H4><CODE>Vector&lt;T&gt;(const T&amp; start, const T&amp; incr,
size_t n)</CODE></H4>
<P>This creates a vector of length <CODE>n</CODE>, such that the zeroth element
is set to <CODE>start</CODE>, and each element after is incremented by
<CODE>incr</CODE>. Initialization of these values is done with the copy
constructor of type <CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;T&gt;(const Vector&lt;T&gt;&amp; rhs)</CODE></H4>
<P>The copy constructor makes a shallow copy of the vector <CODE>rhs</CODE>.
This means that it views the same data as <CODE>rhs</CODE>, in exactly the same
way. If <CODE>rhs</CODE> is not an owner of its data, then the new vector will
not be either. The primary purpose of this constructor is for making permanent
versions of returned temporary vectors, for example:</P>

<DIV CLASS=sc>
<P>Vec_DP x(4.5, 10), y(2.5, 10);</P>
<P>Vec_DP z(x + y);</P>
</DIV>

<H4><CODE>Vector&lt;complex&lt;T&gt; &gt;(const Vector&lt;T&gt;&amp; re, const
Vector&lt;T&gt;&amp; im)</CODE></H4>
<P>This creates a complex vector from two real vectors. It will only work
properly for the following types: <CODE>float</CODE> and
<CODE>double</CODE>.</P>
 
<H4><CODE>Vector&lt;complex&lt;T&gt; &gt;(const Vector&lt;T&gt;&amp; re, const
T&amp; im)</CODE></H4>
<P>This creates a complex vector from a real vector, and a scalar. It also only
works for the types listed above.</P>

<H3>3.3. Member Functions.</H3>

<H4><CODE>Vector&lt;T&gt;&amp; apply(void (*fn)(T&amp; x))</CODE></H4>
<P>This function applies the function <CODE>fn</CODE> to each element of the
vector it is called for. This is intended for unary functions which take an
argument by reference, and do something to that argument. This member function
returns itself by reference, allowing for cascading.</P>

<H4><CODE>Vector&lt;T&gt;&amp; apply(T (*fn)(T x))</CODE></H4>
<P>This function applies the function <CODE>fn</CODE> to each element of the
vector it is called for. The function must take one argument of type
<CODE>T</CODE>, and return a value that can be cast to type <CODE>T</CODE>.
This member function returns itself by reference, allowing for cascading.</P>

<H4><CODE>Vector&lt;T&gt;&amp; apply(T (*fn)(const T&amp; x))</CODE></H4>
<P>This function applies the function <CODE>fn</CODE> to each element of the
vector it is called for. The function must take one argument of type
<CODE>T&amp;</CODE>, and return a value that can be cast to type
<CODE>T</CODE>.This member function returns itself by reference, allowing for
cascading.</P>

<H4><CODE>Vector&lt;T&gt; copy()</CODE></H4>
<P>This function returns a deep copy of the vector it is called for. This means
that the returned vector will be the only object referencing its data, and that
its stride will be one. Copying is done with the assignment operator of type
<CODE>T</CODE>.</P>

<H4><CODE>bool is_owner() const</CODE></H4>
<P>Returns <CODE>true</CODE> if the vector is an owner of its data, and
<CODE>false</CODE> otherwise.</P>

<H4><CODE>bool is_deep() const</CODE></H4>
<P>Returns <CODE>true</CODE> if the following criteria are met:</P>

<UL>
  <LI>The vector must be the only owner of its data.</LI>
  <LI>The vector must have a stride of one.</LI>
  <LI>The vector must start at the beginning of its data object, and have
  the same size as the data object.</LI></UL>

<P>If any of these criteria are not met, <CODE>false</CODE> is returned.</P>

<H4><CODE>bool empty() const</CODE></H4>
<P>Returns <CODE>true</CODE> if the vector is empty (size = 0), and
<CODE>false</CODE> otherwise.</P>

<H4><CODE>void make_deep()</CODE></H4>
<P>This function causes a vector to become a deep copy of itself. It now owns
its own data, and has a stride of one. Its original data is not changed,
although it is deallocated if the vector it is called for is the only remaining
owner of it. If new memory is allocated, then copying is done with the
assignment operator of type <CODE>T</CODE>.</P>

<H4><CODE>void ref(const Vector&lt;T&gt;&amp; x)</CODE></H4>
<P>This causes the vector it is called for to become a shallow copy of
<CODE>x</CODE>. If <CODE>x</CODE> is not an owner of its data, then the vector
will not be either. This is very useful for setting a vector to a returned
temporary, for example:</P>

<DIV CLASS=sc>
<P>Vec_INT x(2, 10), y;</P>
<P>y.ref(x + 2);</P>
</DIV>

<P>Note that telling a vector to reference itself is ok. This simply does
nothing.</P>

<H4><CODE>void view(const Vector&lt;T&gt;&amp; x)</CODE></H4>
<P>This functions identically to <CODE>ref()</CODE>, except that the vector
will not be an owner of the data referenced. Note that this means that if the
last owner of its data is destroyed, this vector will become invalidated. If
<CODE>x</CODE> is not an owner of its data, then this functions exactly like
<CODE>ref()</CODE>. Telling a vector to view itself does nothing. However,
telling a vector which owns its data, and which is the only owner of its data,
to view a temporary view of itself, is an error, as the data will be deallocated
after the function call. For example, consider the following:</P>

<DIV CLASS=sc>
<P>Vec_DP x(5.0, 10);</P>
<P>x.view(x.slice(0, 5, 2));</P>
</DIV>

<P>The <CODE>view()</CODE> function call here would first create a temporary
vector which views the slice, and then make <CODE>x</CODE> a non-owner view of
that slice. This leaves the temporary vector as the only owner of the data.
When that temporary vector is destroyed, the data is deallocated, invalidating
<CODE>x</CODE>.

<H4><CODE>void view(T* p, ptrdiff_t n, ptrdiff_t s = 1)</CODE></H4>
<P>This function will cause a vector to view the data pointed to by
<CODE>p</CODE>. The vector will not be an owner of the data.  Note that this
means that if the data is deallocated, this vector will become invalidated.</P>

<H4><CODE>void clear()</CODE></H4>
<P>This makes a vector size zero, deallocating any memory it is using if it is
the only owner of its data.</P>

<H4><CODE>void reshape(size_t n)</CODE></H4>
<P>This changes the size of the vector to <CODE>n</CODE>. The vector no longer
views its old data. Instead, it has new data of its own, whose elements are
initialized with the default constructor of type <CODE>T</CODE>. If class
<CODE>T</CODE> has a specialized version of the <CODE>VMTraits&lt;T&gt;</CODE>
structure, with the flag <CODE>is_simple</CODE> set to <CODE>true</CODE>, then
the elements will not be initialized at all.</P>

<H4><CODE>void resize(size_t n)</CODE></H4>
<P>The same as <CODE>reshape()</CODE>, except that the data is copied. If the
vector is made shorter, then the copied data is truncated. If it is made
longer, then the new values will be set to zero with the
<CODE>VMTraits&lt;T&gt;::zero()</CODE> function. Copying is done with the
assignement operator of type <CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;T&gt; slice(ptrdiff_t b, ptrdiff_t n, ptrdiff_t s = 1)
const</CODE></H4>
<P>This returns a new view of the data that is a slice of the current view.
<CODE>b</CODE> is the element that the slice should start with, <CODE>n</CODE>
is the number of elements in the new slice, and <CODE>s</CODE> is the stride of
the slice, that is, the number of elements that should be incremented by to get
to the next element of the slice. Note that <CODE>s</CODE> can be negative. For
example, the following views a vector in reverse order:</P>

<DIV CLASS=sc>
<P>Vec_DP x(0.0, 0.5, 10);</P>
<P>Vec_DP y = x.slice(9, 10, -1);</P>
</DIV>

<P>If the vector is not an owner of its data, the returned slice will not be
either.</P>

<H4><CODE>Vector&lt;T&gt; real() const</CODE></H4>
<P>This returns the real part of a <CODE>complex&lt;T&gt;</CODE> vector. Note
that this returns a non-owner view of the real part, and not a deep copy. To
make a deep copy, either use the <CODE>copy()</CODE> member function, or use
the global <CODE>real()</CODE> function instead. Note also that this function
uses pointer casting to make the view. This should work on all implementations
for <CODE>complex&lt;float&gt;</CODE> and <CODE>complex&lt;double&gt;</CODE>.
Attempting to use it with other complex types, or with non-complex types, will
almost certainly result in errors. If you want the real or imaginary part of
complex vector of some other type, then use the global functions instead. They
do not use pointer casting.</P>

<H4><CODE>Vector&lt;T&gt; imag() const</CODE></H4>
<P>This returns the imaginary part of a <CODE>complex&lt;T&gt;</CODE> vector.
The same limitations apply as for <CODE>real()</CODE>.</P>

<H4><CODE>size_t size() const</CODE></H4>
<P>This returns the size of the vector.</P>

<H4><CODE>size_t max_size() const</CODE></H4>
<P>This returns the maximum size of a vector of this type.</P>

<H4><CODE>ptrdiff_t stride() const</CODE></H4>
<P>This returns the stride of the vector.</P>

<H4><CODE>T* data()</CODE></H4>
<P>This returns a pointer to the beginning of the vector's data. It is up to
the user to keep track of the stride.</P>

<H4><CODE>const T* data() const</CODE></H4>
<P>The constant version of this member function returns a constant pointer.</P>

<H4><CODE>T sum() const</CODE></H4>
<P>This returns the sum of the elements of the vector using the <CODE>+=</CODE>
operator of type <CODE>T</CODE>. The vector must not be empty.</P>

<H4><CODE>T min() const</CODE></H4>
<P>This returns the smallest element in the vector, using the <CODE>&lt;</CODE>
operator of type <CODE>T</CODE>. The vector must not be empty.</P>

<H4><CODE>T max() const</CODE></H4>
<P>This returns the largest element in the vector, using the <CODE>&lt;</CODE>
operator of type <CODE>T</CODE>. The vector must not be empty.</P>

<H4><CODE>Vector&lt;T&gt; rotate(ptrdiff_t n) const</CODE></H4>
<P>This returns a copy of the original vector rotated by <CODE>n</CODE> points.
This means that <CODE>R[i] = V[(i + n) % V.size()]</CODE>, where <CODE>V</CODE>
is the original vector, and <CODE>R</CODE> is the rotated vector.</P> 

<H4><CODE>Vector&lt;T&gt; delta() const</CODE></H4>
<P>This returns a vector such that <CODE>D[i] = V[i] - V[i-1]</CODE>. The first
point is given by <CODE>D[0] = V[0]</CODE>.</P>

<H4><CODE>Vector&lt;T&gt; cumsum() const</CODE></H4>
<P>This returns the cumulative sum of the vector. Each element of the new
vector is the sum of all elements of the original vector up to, and including,
that element.</P>

<H4><CODE>Matrix&lt;T&gt; row_matrix() const</CODE></H4>
<P>This creates a matrix view of the vector's data. The data is represented as
a matrix with one row, and <CODE>n</CODE> columns, where <CODE>n</CODE> is the
size of the vector. If the vector is not an owner of its data, then the
returned matrix will not be either.</P>

<H4><CODE>Matrix&lt;T&gt; col_matrix() const</CODE></H4>
<P>This creates a matrix view of the vector's data. The data is represented as
a matrix with one column and <CODE>n</CODE> rows, where <CODE>n</CODE> is the
size of the vector. If the vector is not an owner of its data, then the
returned matrix will not be either.</P>

<H4><CODE>Matrix&lt;T&gt; matrix(ptrdiff_t b, ptrdiff_t n, ptrdiff_t m,
ptrdiff_t rs = 0, ptrdiff_t cs = 1) const</CODE></H4>
<P>This creates a matrix view of the vector's data. The data is represented as
a matrix with <CODE>n</CODE> rows and <CODE>m</CODE> columns, where
<CODE>b</CODE> is the index of element <CODE>(0, 0)</CODE> of the created
matrix, <CODE>rs</CODE> is the number of elements between adjacent rows, and
<CODE>cs</CODE> is the number of elements between adjacent columns. If no values
for these optional parameters are given, then <CODE>cs</CODE> will be set to 1,
and <CODE>rs</CODE> will be set to <CODE>m</CODE>. If the vector is not an
owner of its data, then the returned matrix will not be either.</P>

<H4><CODE>void sort()</CODE></H4>
<P>This sorts the elements of the vector using the
<CODE>Vector&lt;T&gt;::iterator</CODE> class, and the <EM>Standard Template
Library</EM> function <CODE>std::sort(Vector&lt;T&gt;::iterator a,
Vector&lt;T&gt;::iterator b)</CODE>. <CODE>T</CODE> must have an available
<CODE>operator&lt;()</CODE>.</P>

<H4><CODE>template &lt;class order&gt; void sort(order fn)</CODE></H4>
<P>This sorts the elements of the vector using the
<CODE>Vector&lt;T&gt;::iterator</CODE> class, and the <EM>Standard Template
Library</EM> function <CODE>std::sort(Vector&lt;T&gt;::iterator a,
Vector&lt;T&gt;::iterator b, order fn)</CODE>. In this case comparison is done
with the ordering function-object <CODE>order</CODE>. This can be any object
with a function call operator that takes two arguments of type <CODE>T</CODE>,
and returns a <CODE>bool</CODE>. It can also be any non-overloaded function
pointer with the above argument and return types.</P>

<H4><CODE>void swap(Vector&lt;T&gt;&amp; a)</CODE></H4>
<P>This swaps the values in vector <CODE>a</CODE> with those of the vector it
is called for. Both vectors must be the same size.  Note that the
<CODE>std::swap()</CODE> function provided by the <EM>Standard Template
Library</EM> will not work with vectors.

<H4><CODE>void swap_views(Vector&lt;T&gt;&amp; a)</CODE></H4>
<P>This swaps the vector <CODE>a</CODE> with the vector it is called for. This
is done by simply pointing each vector at the other one's data. This is much
more efficient than <CODE>swap()</CODE>, and the vectors do not have to be the
same size, but it only changes the views. The actual data, and any other objects
viewing that data, are unaffected.</P>

<H4><CODE>Vector&lt;T&gt;::iterator begin()</CODE></H4>
<P>This returns an iterator to the beginning of the vector.</P>

<H4><CODE>Vector&lt;T&gt;::iterator end()</CODE></H4>
<P>This returns an iterator to the end of the vector.</P>

<H4><CODE>Vector&lt;T&gt;::const_iterator begin() const</CODE></H4>
<P>This returns a constant iterator to the beginning of the vector.</P>

<H4><CODE>Vector&lt;T&gt;::const_iterator end() const</CODE></H4>
<P>This returns a constant iterator to the end of the vector.</P>

<H4><CODE>Vector&lt;T&gt;::reverse_iterator rbegin()</CODE></H4>
<P>This returns a reverse iterator to the last element of the vector.</P>

<H4><CODE>Vector&lt;T&gt;::reverse_iterator rend()</CODE></H4>
<P>This returns a reverse iterator to just before the beginning of the
vector.</P>

<H4><CODE>Vector&lt;T&gt;::const_reverse_iterator rbegin() const</CODE></H4>
<P>This returns a constant reverse iterator to the last element of the
vector.</P>

<H4><CODE>Vector&lt;T&gt;::const_reverse_iterator rend() const</CODE></H4>
<P>This returns a constant reverse iterator to just before the beginning of the
vector.</P>

<H4><CODE>ptrdiff_t read(istream&amp; in, File_Mode fm = TXT)</CODE></H4>
<P>This reads the contents of a stream into the vector. Data is read in from the
stream until either the stream ends, or the end of the vector is reached. This
may result in the stream being read to the end, so you may need to use the
<CODE>clear()</CODE> member function if you wish to continue using the stream.
The return value is the number of values read. If the end of the stream is
reached before the end of the vector, then the remaining portion of the vector
is not affected. The optional parameter <CODE>fm</CODE> is used to indicate
whether the stream is in text or binary mode. The argument is of the type
<CODE>File_Mode</CODE> which is an enumerator type defined in "vm_basic.h". It
has two values: <CODE>TXT</CODE> and <CODE>BIN</CODE>. The default is
<CODE>TXT</CODE>. <CODE>BIN</CODE> should be used if the stream is an fstream
which was opened in binary mode. Note that in binary mode, if the file ends in
the middle of reading in a value, then that value will be nonsense.</P>

<H4><CODE>ptrdiff_t read(const string&amp; fname, File_Mode fm =
TXT)</CODE></H4>
<P>This reads the contents of a file, whose name is stored in the string
<CODE>fname</CODE>. As with the istream version, values are read until either
the end of the file is reached, or until the end of the vector is reached. If
reading of the file was successful, then the return value is the number of
values read. If the file could not be opened, or it contains no data, then the
return value is -1. In the case of binary files, if the file length in bytes is
not an integer multiple of the size of the type being read, then no values are
read and a value of -2 is returned. The optional parameter <CODE>fm</CODE>
allows reading in binary format (<CODE>fm = BIN</CODE>). Text format is the
default.</P> 

<H4><CODE>void write(ostream&amp; out, File_Mode fm = TXT) const</CODE></H4>
<P>This outputs the contents of the vector to a stream. The elements are
separated with a carriage return delimiter. As with <CODE>read()</CODE>, the
optional parameter <CODE>fm</CODE> indicates whether to use text or binary
formatting for the stream.</P>

<H4><CODE>void write(const string&amp; fname, File_Mode fm = TXT)
const</CODE></H4>
<P>This outputs the contents of the vector to a file. The optional parameter
<CODE>fm</CODE> should be set to <CODE>BIN</CODE> to output in binary
format. Text format is the default.</P>

<H4><CODE>template &lt;class G&gt; Vector&lt;T&gt;&amp; fill(G
gen)</CODE></H4>
<P>This function fills the vector with values from the generator
<CODE>gen</CODE>. Class <CODE>G</CODE> must have a function call operator
which takes no arguments, and returns a value that can be cast to type
<CODE>T</CODE>. This includes the four random number generator classes
<CODE>BaseGen</CODE>, <CODE>IntGen</CODE>, <CODE>UniformGen</CODE>, and
<CODE>NormalGen</CODE>. Ordinary function pointers can be passed as well, but
note that the compiler will not be able to resolve the function if it is
overloaded. This member function returns itself by reference, allowing for
cascading.</P>

<H4><CODE>template &lt;class G&gt; Vector&lt;T&gt;&amp; transform(F
fn)</CODE></H4>
<P>This function applies the function object <CODE>fn</CODE> to each element
of the vector it is called for. Class <CODE>F</CODE> must have a function call
operator which takes one argument of type <CODE>T</CODE>, and returns a value
that can be cast to type <CODE>T</CODE>. Ordinary function pointers can be
passed as well, but note that the compiler will not be able to resolve the
function if it is overloaded. This member function returns itself by reference,
allowing for cascading.</P>

<H4><CODE>template &lt;class U&gt; Vector&lt;U&gt; convert() const</CODE></H4>
<P>This creates a vector of type <CODE>U</CODE> from a vector of type
<CODE>T</CODE>. It must be possible to explicitly cast type <CODE>T</CODE> to
type <CODE>U</CODE>, where <CODE>T</CODE> is the type of the original vector.
Since the type <CODE>U</CODE> cannot be derived from the function call, it must
be specified. Example:</P>

<DIV CLASS=sc>
<P>Vec_DP x(4.5, 10);</P>
<P>Vec_SP y = x.convert&lt;float&gt;();</P>
</DIV>

<H4><CODE>template &lt;class U&gt; Vector&lt;U&gt; shallow_cast()
const</CODE></H4>
<P>This creates a shallow copy of the vector it is called for, but of type
<CODE>Vector&lt;U&gt;</CODE>. This is done using pointer casting, which means
the new vector views the same data as the original, but views it as data of
type <CODE>U</CODE> instead of as type <CODE>T</CODE>. For example, the
internal representation of <CODE>int</CODE> and <CODE>long</CODE> is the same
on many platforms. This function allows you to view a vector of type
<CODE>int</CODE> as a vector of type <CODE>long</CODE>, without making a
separate copy of the data.  Types <CODE>T</CODE> and <CODE>U</CODE> must have
the same size. The returned vector is not an owner of the data, so there is no
danger of the data elements being destroyed by the wrong destructor. However
using pointer casts in this way is not supported by the <EM>C++</EM> standard,
so it is up to the user to make sure this will work on their implementation.
Since the type <CODE>U</CODE> cannot be derived from the function call, it must
be specified. Example:</P>

<DIV CLASS=sc>
<P>Vec_INT x(4.5, 10);</P>
<P>Vec_UINT y = x.shallow_cast&lt;unsigned int&gt;();</P>
</DIV></P>

<H3>3.4. Member Operators.</H3>

<H4><CODE>Vector&lt;T&gt;&amp; operator=(const Vector&lt;T&gt;&amp;
rhs)</CODE></H4>
<P>This uses the assignment operator of type <CODE>T</CODE> to do an
element-by-element copy of <CODE>rhs</CODE> to the vector it is called for,
which is the left hand side of the expression. The vectors must be the same
size. Note that no checks for aliasing are made. If the vectors view the same
block of data, and those views overlap, the results may be very unexpected.</P>

<H4><CODE>Vector&lt;T&gt;&amp; operator=(const T&amp; rhs)</CODE></H4>
<P>This uses the assignment operator of type <CODE>T</CODE> to copy
<CODE>rhs</CODE> to each element of the vector it is called for.</P>

<DIV CLASS=clb>
<P>Vector&lt;T&gt;&amp; operator+=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator-=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator*=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator/=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator%=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&amp;=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator^=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator|=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&gt;&gt;=(const Vector&lt;T&gt;&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&lt;&lt;=(const Vector&lt;T&gt;&amp; rhs)</P>
</DIV>

<P>These operators use the arithmetic assignment operators of type
<CODE>T</CODE> to do element-by-element arithmetic assignment. The vectors
must be the same size.  Note that no checks for aliasing are made. If the
vectors view the same block of data, and those views overlap, the results may
be very unexpected.</P>

<DIV CLASS=clb>
<P>Vector&lt;T&gt;&amp; operator+=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator-=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator*=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator/=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator%=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&amp;=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator^=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator|=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&gt;&gt;=(const T&amp; rhs)</P>
<P>Vector&lt;T&gt;&amp; operator&lt;&lt;=(const T&amp; rhs)</P>
</DIV>

<P>These operators use the arithmetic assignment operators of type
<CODE>T</CODE> to perform the corresponding operation on each element of the
vector.</P>

<H4><CODE>Vector&lt;T&gt; operator+() const</CODE></H4>
<P>This returns a vector such that each element is the result of applying the
unary <CODE>+</CODE> operator to each element of the original vector. This
operator must be available for type <CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;T&gt; operator-() const</CODE></H4>
<P>This returns a vector such that each element is the negation of the original
value. The unary <CODE>-</CODE> operator must be available for type
<CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;bool&gt; operator!() const</CODE></H4>
<P>This returns a vector of <CODE>bool</CODE> values such that <CODE>B[i] =
!V[i]</CODE>, where <CODE>B</CODE> is the returned vector, and <CODE>V</CODE>
is the original vector. This operator must be available for type
<CODE>T</CODE>.</P>

<H4><CODE>Vector&lt;T&gt; operator~() const</CODE></H4>
<P>This returns a vector by applying the <CODE>~</CODE> operator to each
element. This operator must be available for type <CODE>T</CODE>.</P>

<H4><CODE>T&amp; operator[](ptrdiff_t i)</CODE></H4>
<P>This returns a reference to the <CODE>i</CODE>th element of the vector.</P>

<H4><CODE>const T&amp; operator[](ptrdiff_t i) const</CODE></H4>
<P>The constant version of this operator returns a constant reference.</P>

<H4><CODE>T&amp; operator()(ptrdiff_t i)</CODE></H4>
<P>Exactly the same as the <CODE>[]</CODE> operator. This means that a vector
can be treated as a function object.</P>

<H4><CODE>const T&amp; operator()(ptrdiff_t i) const</CODE></H4>
<P>The constant version of this operator returns a constant reference.</P>


<P><A HREF="matrix.htm">Next Section</A></P>
<P><A HREF="vecmat.htm">Back to Index</A></P>

</BODY>
</HTML>